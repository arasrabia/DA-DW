# -*- coding: utf-8 -*-
"""Assignment2_Student.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oJ67Ww0hFs-s6mkTo77fNxJa4yoIS1Oj

___

<p style="text-align: center;"><img src="https://docs.google.com/uc?id=1lY0Uj5R04yMY3-ZppPWxqCr5pvBLYPnV" class="img-fluid" alt="Rossum"></p>


____
"""

import pandas as pd

ecom = pd.read_csv('data.csv',encoding= 'unicode_escape')

"""**Check the head of the DataFrame.**"""

ecom.head()

"""** How many rows and columns are there? **"""

ecom.info()

"""** Show the statistical measurements of ecom dataset **"""

ecom.describe()

"""** What is the average Purchase Price? **"""

ecom.UnitPrice.mean()

ecom.describe()['UnitPrice']['mean']

"""** What were the highest and lowest purchase prices? **"""

ecom.UnitPrice.min()

ecom.UnitPrice.max()

"""** List the country names and number of records belongs to each country **"""

ecom['Country'].value_counts()

"""** How many records are as Country United Kingdom? **"""

ecom[ecom['Country'] == 'United Kingdom'].count()

"""** Create a column named Total which shows the total amount of spend using UnitPrice and Quantity ? **

"""

ecom['total'] = ecom['UnitPrice'] * ecom['Quantity']
ecom.total

"""** Show total spending amount according to the Countries **"""

ecom.groupby('Country')['total'].sum()

"""** Which Country spend least? **"""

(ecom.groupby('Country')['total'].sum()).sort_values()[:1]



"""** Calculate average of spending according to country with apply function? **"""

import numpy as np

ecom.groupby('Country')['total'].apply(np.mean)

"""** Calculate average,min,max of spending according to country with agg function? **"""

ecom.groupby('Country')['total'].agg([max, min, np.mean])

"""** What is the max Total spending in whole dataset and show the records of that spending ?**"""

ecom.sort_values('total', ascending=False).head(1)

"""** How many people who live in Spain spend more than average Total ?**"""

ecom[(ecom['Country']== 'Spain')& (ecom['total'] > ecom['total'].mean())].count()

"""** Convert datatype of InvoiceDate to datetime and assign it to new column name InvoiceDate2**"""

ecom['InvoiceDate2'] = pd.to_datetime(ecom['InvoiceDate'])
ecom['InvoiceDate2']

"""** Take only date values (year-month-day) from InvoiceDate2 and assign it to a new column named date **"""

ecom['date'] = pd.to_datetime(ecom['InvoiceDate2'].dt.date)
ecom['date']

"""** drop InvoiceDate2 and InvoiceDate columns permanently **"""

ecom.drop(['InvoiceDate2', 'InvoiceDate'], inplace=True, axis=1 )

ecom.head()

"""** Remove A, B, G and E from StockCode in first 5 rows of ecom dataframe with a string method **"""

def delete(x):
  return x[:-1]

ecom['StockCode'].apply(delete)

"""** take only Total and date columns with loc and craete a new df named ecom2 **"""

ecom2 = ecom.loc[: , ['total', 'date']]
ecom2

"""** take only InvoiceNo, CustomerID and Total columns with iloc and craete a new df named ecom3 **"""

ecom3 = ecom.iloc[:, [0, 5, 8]]
ecom3

"""** Combine ecom2 and ecom3 with concat **"""

concat_df = pd.concat([ecom2, ecom3], axis=1)
concat_df

"""** Combine ecom2 and ecom3 with merge. If memory error occurs take only first 400 rows from both DFs.**"""

merge_df = pd.merge(ecom2.iloc[:400, :], ecom3.iloc[:400 , :])
merge_df

"""** Combine ecom2 and ecom3 with join (inner)**"""

inner_join = ecom3.join(ecom2, how='inner', lsuffix='_left',rsuffix='_right')
inner_join

"""# Congrats!"""

