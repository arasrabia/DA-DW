# -*- coding: utf-8 -*-
"""Assignment-1-Student.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lic0aozAer1Buudl6Ea7IumZZWjIyMJi

___

<p style="text-align: center;"><img src="https://docs.google.com/uc?id=1lY0Uj5R04yMY3-ZppPWxqCr5pvBLYPnV" class="img-fluid" alt="Rossum"></p>

In this assignment you will start off with Numpy Exercises and then complete the whole Exercise with Pandas questions. All the subjects related to questions here already covered in preclass materials and in-class sessions. So good luck!

#### 1. Import NumPy Library
"""

import numpy as np

"""#### 2. Create an array from my_list=[5,10,15,20,25]"""

my_list=[5,10,15,20,25]
np.array(my_list)

"""#### 3. Generate an array 5x5 zeros """

zero = np.zeros((5,5))
zero

"""#### 4. Generate an array 4x4 ones assign data type int"""

one = np.ones((4, 4), dtype=int)
one

"""#### 5. Make all the values of the array above 7"""

my_list = [7, 7, 7, 7]
arrays = np.array([my_list, my_list, my_list, my_list])
arrays

"""#### 6. Create same array above with full method"""

new_array = np.full((4, 4), 7)
new_array

"""#### 7. Create an array of even integers from 2 to 16 """

new_array = np.arange(2, 17, 2)
new_array

"""#### 8. Create a 5x5 matrix with values between 0 to 25"""

np.arange(0, 25, dtype=int).reshape(5, 5)

"""#### 9. Create a 5x5 matrix with values between 0 to 25 using linspace"""

np.linspace(0, 24, 25 , dtype=int).reshape(5, 5)

"""#### 10. Create 5 random number with numpy"""

np.random.rand(5)

"""#### 11. Create random normal distributed 5x5 array"""

np.random.randn(5, 5)

"""#### 12. Create 3x4 shaped array with random int numbers between 20 and 50 with numpy"""

x = np.random.randint(20, 50, size=(3, 4))
x

"""#### 13. Reshape the array below with shape 6x8"""

ranarr = np.arange(2, 50).reshape(6, 8)
ranarr

ranarr = np.random.randint(1, 60, 48)
ranarr

ranarr.reshape(-1, 12)

"""## Numpy Indexing and Selection

"""

#Create array below
mat= np.arange(1, 17).reshape(4, 4)
mat

"""#### 14. Write code that reproduces the output shown below.<br>"""

mat[1:3, 1:3]

"""#### 15. Get the first column of the array."""

mat[:,0]

"""#### 16. Get the values in 2nd row for every 2 step."""

mat[[1,1],[0,2]]    ###mat[1, ::2]

"""#### 17.Assign 77 to every cell in 3rd column."""

mat[:,2] = 77
mat

"""#### 18. Take 2nd row 1st column, 4th row 2nd column."""

mat[[1, 3],[0, 1]]

"""#### 19. Take between 2nd and last row with step 2 and between 1 and last column with step 2."""

mat[1::2, ::2]        ##mat[1::2,[0,2]]



"""## NumPy Operations

#### 20. Get the sum of values smaller than 10 and values bigger than 12 from array above
"""

mat

mat[mat<10]

mat[mat>12]

mat[mat<10] + mat[mat>12]

"""#### 21. Get the standard deviation of the result above"""

np.std(mat[(mat<10)] + mat[(mat>12)])

"""#### 22. Get the sum of second column from array above"""

#print array here
mat

np.sum(mat[:,1])

"""#### 23. Get the median,mean and std of 3rd row from array above"""

matt= np.arange(1, 17).reshape(4, 4)
matt

matt[2]

np.median(matt[2])

#mean
np.mean(matt[2])

#std
np.std(matt[2])

"""# Pandas Section"""

import pandas as pd

"""**Read Salaries.csv take a look at first 5 rows, df info and df statistical measurements**"""

pwd

sal = pd.read_csv('Salaries 2.csv')
sal

sal.head(5)

sal.info()

sal.describe().T

"""**How many different year value are there**"""

sal.Year.value_counts()

"""**Print out max and avg Totalpay**"""

#max
sal.TotalPay.max()

#min
sal.TotalPay.min()

#avg
sal.TotalPay.mean()

"""**How many records are there which have TotalPay bigger than avg TotalPay**"""

len(sal.TotalPay[sal.TotalPay >sal.TotalPay.mean()].value_counts())

"""**How much does ALBERT PARDINI make (including benefits)?**"""

sal.TotalPayBenefits[sal['EmployeeName''] =='ALBERT PARDINI']

"""**Who is lowest paid person**"""

sal[sal.TotalPayBenefits==sal.TotalPayBenefits.min()]['EmployeeName']

"""**What are the unique Jobs in dataset?**"""

from numpy.ma.extras import unique
sal.JobTitle.unique()

"""**List 3 least common Jobs**"""

from pandas.core.algorithms import value_counts
sal['JobTitle'].value_counts().tail(3)

"""**How many people earned more than avg in 2012**"""

sal[(sal.TotalPayBenefits>sal.TotalPayBenefits.mean())& (sal.Year==2012)]['EmployeeName'].count()

"""**How many people have the word Manager in their job title?**"""

#use apply function here
def manager_func(x):
  if 'manager' in x.lower():
    return True
  else:
    return False

len(sal[sal.JobTitle.apply(manager_func)])



len(sal[sal.JobTitle.apply(lambda x: True if 'manager' in x.lower() else False)])

"""**Take Id,EmployeeName,JobTitle,TotalPay and TotalPayBenefits columns with iloc and assign it as sal_new dataframe**"""

sal_new = sal.iloc[:,[0, 1, 2, 7, 8]]
sal.head()

"""**Take columns betweeen EmployeeName and TotalPayBenefits with loc and assign it o sal_new df**
 
"""

sal_new=sal_new.loc[:,'EmployeeName':'TotalPayBenefits']
sal_new

"""**Print out the names of the employees who earn more than min, but less than avg**"""

sal[(sal.TotalPayBenefits>sal.TotalPayBenefits.min()) & 
       (sal.TotalPayBenefits<sal.TotalPayBenefits.mean())]['EmployeeName']

